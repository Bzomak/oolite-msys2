# Workflow to compile Oolite and necessary dependencies

name: Build Oolite on MSYS2-MINGW64
on: 
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run build tests"
        required: false
        type: boolean
        default: false
  pull_request:
  push:
    branches:
      - main
jobs:

########################################
########################################
########################################

# Build Oolite

  build-oolite:
    name: Build Oolite
    runs-on: windows-latest
    needs: [build-tools-make, build-libs-base, build-sdl]
    defaults:
      run:
        shell: msys2 {0}
    env:
      OOLITE_BUILD_MSYS2_DEPS:
    strategy:
      matrix:
        build_type: [debug, release, release-deployment, release-snapshot]
      fail-fast: false
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo OOLITE_BUILD_MSYS2_DEPS=$(cat oolite-config/msys2-deps) >> $GITHUB_ENV

      - name: "Set up msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.OOLITE_BUILD_MSYS2_DEPS }}

      - name: "Retrieve tools-make cache"
        uses: actions/cache/restore@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}
          fail-on-cache-miss: true

      - name: "Install tools-make"
        run: |
          bash ./deps/tools-make/install.sh

      - name: "Retrieve libs-base cache"
        uses: actions/cache/restore@v4
        with:
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/deps/libs-base/*', '**/deps/tools-make/*') }}
          fail-on-cache-miss: true

      - name: "Install libs-base"
        run: |
          bash ./deps/libs-base/install.sh

      - name: "Retrieve SDL cache"
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/deps/sdl/*') }}
          fail-on-cache-miss: true

      - name: "Install SDL"
        run: |
          bash ./deps/sdl/install.sh

      - name: "Checkout oolite"
        uses: actions/checkout@v4
        with:
          repository: OoliteProject/oolite
          path: oolite
          submodules: recursive

      - name: "Configure and build Oolite"
        run: |
          bash ./oolite-config/build.sh ${{ matrix.build_type }}

      - name: "Cache Oolite build"
        uses: actions/cache/save@v4
        with:
          path: oolite
          key: cache-oolite-${{ matrix.build_type }}-${{ github.run_id }}-${{ github.run_attempt }}

########################################

# Build the installers.

  build-oolite-installers:
    name: Build Oolite installers
    runs-on: windows-latest
    needs: [build-tools-make, build-libs-base, build-sdl, build-oolite]
    defaults:
      run:
        shell: msys2 {0}
    env:
      OOLITE_INSTALLER_BUILD_MSYS2_DEPS:
    strategy:
      matrix:
        build_type: [release, release-deployment, release-snapshot]
      fail-fast: false
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo OOLITE_INSTALLER_BUILD_MSYS2_DEPS=$(cat oolite-installer-config/msys2-deps) >> $GITHUB_ENV

      - name: "Set up msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.OOLITE_INSTALLER_BUILD_MSYS2_DEPS }}

      - name: "Retrieve tools-make cache"
        uses: actions/cache/restore@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}
          fail-on-cache-miss: true
    
      - name: "Install tools-make"
        run: |
          bash ./deps/tools-make/install.sh
          
      - name: "Retrieve libs-base cache"
        uses: actions/cache/restore@v4
        with:
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/deps/libs-base/*', '**/deps/tools-make/*') }}
          fail-on-cache-miss: true

      - name: "Install libs-base"
        run: |
          bash ./deps/libs-base/install.sh

      - name: "Retrieve SDL cache"
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/deps/sdl/*') }}
          fail-on-cache-miss: true

      - name: "Install SDL"
        run: |
          bash ./deps/sdl/install.sh
          
      - name: "Retrieve Oolite cache"
        uses: actions/cache/restore@v4
        with:
          path: oolite
          key: cache-oolite-${{ matrix.build_type }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true

      - name: "Build installers"
        run: |
          bash ./oolite-installer-config/build.sh ${{ matrix.build_type }}

      - name: "Upload Oolite installers as artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: oolite-${{ matrix.build_type }}.exe
          path: |
            oolite/installers/win32/OoliteInstall*.exe

########################################
########################################
########################################

# Build the dependencies that need to be installed to build Oolite.

  build-tools-make:
    name: Build tools-make
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    env:
      TOOLS_MAKE_VERSION:
      TOOLS_MAKE_MSYS2_DEPS:
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo TOOLS_MAKE_VERSION=$(cat deps/tools-make/version) >> $GITHUB_ENV
          echo TOOLS_MAKE_MSYS2_DEPS=$(cat deps/tools-make/msys2-deps) >> $GITHUB_ENV

      - name: "Check for pre-existing tools-make cache"
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}
          lookup-only: true

      - name: "Early exit if cache exists"
        id: early-exit
        if: steps.check-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "tools-make cache exists, exiting early" >> $GITHUB_STEP_SUMMARY

      - name: "Set up msys2"
        if: steps.early-exit.conclusion != 'success'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.TOOLS_MAKE_MSYS2_DEPS }}

      - name: "Checkout tools-make"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/checkout@v4
        with:
          repository: gnustep/tools-make
          path: tools-make
          ref: ${{ env.TOOLS_MAKE_VERSION }}

      - name: "Configure and build tools-make"
        if: steps.early-exit.conclusion != 'success'
        run: |
          bash ./deps/tools-make/build.sh

      - name: "Cache tools-make build"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/cache/save@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}

########################################

  build-libs-base:
    name: Build libs-base
    runs-on: windows-latest
    needs: [build-tools-make]
    defaults:
      run:
        shell: msys2 {0}
    env:
      LIBS_BASE_VERSION:
      LIBS_BASE_MSYS2_DEPS:
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo LIBS_BASE_VERSION=$(cat deps/libs-base/version) >> $GITHUB_ENV
          echo LIBS_BASE_MSYS2_DEPS=$(cat deps/libs-base/msys2-deps) >> $GITHUB_ENV

      - name: "Check for pre-existing libs-base cache"
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/deps/libs-base/*', '**/deps/tools-make/*') }}
          lookup-only: true

      - name: "Early exit if cache exists"
        id: early-exit
        if: steps.check-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "libs-base cache exists, exiting early" >> $GITHUB_STEP_SUMMARY

      - name: "Set up msys2"
        if: steps.early-exit.conclusion != 'success'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.LIBS_BASE_MSYS2_DEPS }}

      - name: "Retrieve tools-make cache"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/cache/restore@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}
          fail-on-cache-miss: true
    
      - name: "Install tools-make"
        if: steps.early-exit.conclusion != 'success'
        run: |
          bash ./deps/tools-make/install.sh

      - name: "Checkout libs-base"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/checkout@v4
        with:
          repository: gnustep/libs-base
          path: libs-base
          ref: ${{ env.LIBS_BASE_VERSION }}

      - name: "Configure and build libs-base"
        if: steps.early-exit.conclusion != 'success'
        run: |
          bash ./deps/libs-base/build.sh

      - name: "Cache libs-base build"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/cache/save@v4
        with:
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/deps/libs-base/*', '**/deps/tools-make/*') }}

########################################

  build-sdl:
    name: Build SDL
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    env:
      SDL_VERSION:
      SDL_MSYS2_DEPS:
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo SDL_VERSION=$(cat deps/sdl/version) >> $GITHUB_ENV
          echo SDL_MSYS2_DEPS=$(cat deps/sdl/msys2-deps) >> $GITHUB_ENV

      - name: "Check for pre-existing SDL cache"
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/deps/sdl/*') }}
          lookup-only: true

      - name: "Early exit if cache exists"
        id: early-exit
        if: steps.check-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "SDL cache exists, exiting early" >> $GITHUB_STEP_SUMMARY

      - name: "Set up msys2"
        if: steps.early-exit.conclusion != 'success'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.SDL_MSYS2_DEPS }}

      - name: "Download oolite-win-deps SDL patch"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/checkout@v4
        with:
          repository: OoliteProject/oolite-windows-dependencies
          path: Windows-deps
          sparse-checkout: OOSDLWin32Patch/

      - name: "Download and extract SDL"
        if: steps.early-exit.conclusion != 'success'
        run: |
          wget ${{ env.SDL_VERSION }}
          tar -xf SDL-1.2.13.tar.gz

      - name: "Configure and build SDL"
        if: steps.early-exit.conclusion != 'success'
        run: |
          bash ./deps/sdl/build.sh

      - name: "Cache SDL build"
        if: steps.early-exit.conclusion != 'success'
        uses: actions/cache/save@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/deps/sdl/*') }}

########################################
########################################
########################################

# Test the dependencies.
# These jobs only run if the build jobs have been successful and the run_tests input is true.

  test-libs-base:
    name: Test libs-base
    runs-on: windows-latest
    if: ${{ inputs.run_tests }}
    needs: [build-tools-make, build-libs-base]
    defaults:
      run:
        shell: msys2 {0}
    env:
      LIBS_BASE_MSYS2_DEPS:
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo LIBS_BASE_MSYS2_DEPS=$(cat deps/libs-base/msys2-deps) >> $GITHUB_ENV

      - name: "Set up msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.LIBS_BASE_MSYS2_DEPS }}

      - name: "Retrieve tools-make cache"
        uses: actions/cache/restore@v4
        with:
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/deps/tools-make/*') }}
          fail-on-cache-miss: true

      - name: "Install tools-make"
        run: |
          bash ./deps/tools-make/install.sh

      - name: "Retrieve libs-base cache"
        uses: actions/cache/restore@v4
        with:
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/deps/libs-base/*', '**/deps/tools-make/*') }}
          fail-on-cache-miss: true

      - name: "Install libs-base"
        run: |
          bash ./deps/libs-base/install.sh

      - name: "Test libs-base"
        run: |
          . /mingw64/share/GNUstep/Makefiles/GNUstep.sh
          cd libs-base
          make -j $(nproc) check

      - name: Upload tests.log
        uses: actions/upload-artifact@v4
        with:
          name: libs-base_test.log
          path: |
            libs-base/Tests/tests.log

########################################

  test-sdl:
    name: Test SDL
    runs-on: windows-latest
    if: ${{ inputs.run_tests }}
    needs: [build-sdl]
    defaults:
      run:
        shell: msys2 {0}
    env:
      SDL_MSYS2_DEPS:
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Load dependency data into env"
        shell: bash
        run: |
          echo SDL_MSYS2_DEPS=$(cat deps/sdl/msys2-deps) >> $GITHUB_ENV

      - name: "Set up msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.SDL_MSYS2_DEPS }}

      - name: "Retrieve SDL cache"
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/deps/sdl/*') }}
          fail-on-cache-miss: true

      - name: "Install SDL"
        run: |
          bash ./deps/sdl/install.sh

      - name: "Build SDL tests"
        run: |
          cd SDL-1.2.13/test
          ./configure
          make -j $(nproc)

########################################
########################################
########################################

# Clear unnecessary caches on GitHub

  clear-oolite-caches:
    name: Clear Oolite caches
    runs-on: windows-latest
    if: always()
    needs: [build-oolite, build-oolite-installers]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "List Oolite caches"
        run: |
          gh cache list | grep cache-oolite | awk '{print $2}' > cache-list.txt
          cat cache-list.txt

      - name: "Delete Oolite caches"
        run: |
          foreach ($cache in Get-Content cache-list.txt) {
            echo $cache
            gh cache delete $cache
          }

      - name: "List all remaining caches"
        run: |
          gh cache list

########################################
########################################
########################################

# Single script to build Oolite from scratch

  build-oolite-from-fresh-msys2-mingw64:
    name: Test all-in-one build script
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: "Checkout this repository"
        uses: actions/checkout@v4

      - name: "Set up msys2"
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true

      - name: Run build script
        run: |
          bash ./oolite-from-fresh-msys2-mingw64.sh
