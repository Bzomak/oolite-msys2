# Workflow to test the oolite-msys2 repository

# This workflow is can be triggered by a workflow_call event when called by other workflows.
# It can also be called by a workflow_dispatch event from GitHub.

# The workflow currently contains one job:
# - shellcheck: Runs ShellCheck to check all the bash scripts

# TODO
# Add jobs to test the workflow actions.

name: Test repository
on:
  workflow_call:
  workflow_dispatch:
jobs:

########################################
########################################
########################################

# Run Shellcheck to lint the scripts

  shellcheck:
    name: Run ShellCheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

########################################
########################################
########################################

# Test cache-built-dependency action

# Need to check what happens if the path does not exist
# Need to check what happens if the path is empty
# Need to check what happens if the path is not a directory
# Need to check what happens if the key is empty

# Need to check what happens if we want to delete the cache
# Need to check that the caching is successful

########################################
########################################
########################################

# Test early-exit-if-cache-exists action

# Need to check all inputs
# Need to check all outputs
# Need to check early exit

########################################
########################################
########################################

# Test extract-data-string-from-file action

  test-extract-data-string-from-file:
    name: Test extract-data-string-from-file action
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Test - Extracting a single word from a file
        id: extract-data-single-word
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/single-word

      - name: Result - Extracting a single word from a file
        id: extract-data-single-word-result
        if: always()
        run: |
          echo "Extracted data is: '${{ steps.extract-data-single-word.outputs.data }}'"
          if [[ "${{ steps.extract-data-single-word.outputs.data }}" != "foo" ]]; then
            echo "Extracted data is not 'foo'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting multiple words from a file
        id: extract-data-multiple-words
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/multiple-words

      - name: Result - Extracting multiple words from a file
        id: extract-data-multiple-words-result
        if: always()
        run: |
          echo "Extracted data is: '${{ steps.extract-data-multiple-words.outputs.data }}'"
          if [[ "${{ steps.extract-data-multiple-words.outputs.data }}" != "foo bar" ]]; then
            echo "Extracted data is not 'foo bar'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting multiple lines from a file
        id: extract-data-multiple-lines
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/multiple-lines

      - name: Result - Extracting multiple lines from a file
        id: extract-data-multiple-lines-result
        if: always()
        run: |
          echo "Extracted data is: '${{ steps.extract-data-multiple-lines.outputs.data }}'"
          if [[ "${{ steps.extract-data-multiple-lines.outputs.data }}" != $'foo\nbar' ]]; then
          echo "Extracted data is not $'foo\nbar'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting an empty file
        id: extract-data-empty
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/empty

      - name: Result - Extracting an empty file
        id: extract-data-empty-result
        if: always()
        run: |
          echo "Extracted data is: '${{ steps.extract-data-empty.outputs.data }}'"
          if [[ "${{ steps.extract-data-empty.outputs.data }}" != "" ]]; then
          echo "Extracted data is not ''"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting from a non-existent file
        id: extract-non-existent-file
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/non-existent-file

      - name: Result - Extracting from a non-existent file
        id: extract-non-existent-file-result
        if: always()
        run: |
          echo "Action error is: '${{ steps.extract-non-existent-file.outputs.error }}'"
          if [[ "${{ steps.extract-non-existent-file.outputs.error }}" != "Path does not exist" ]]; then
          echo "Action error is not 'Path does not exist'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting from a directory
        id: extract-directory
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path: ./.github/actions/extract-data-string-from-file/test/

      - name: Result - Extracting from a directory
        id: extract-directory-result
        if: always()
        run: |
          echo "Action error is: '${{ steps.extract-directory.outputs.error }}'"
          if [[ "${{ steps.extract-directory.outputs.error }}" != "Path is a directory" ]]; then
          echo "Action error is not 'Path is a directory'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Test - Extracting from an empty path
        id: extract-empty-path
        if: always()
        uses: ./.github/actions/extract-data-string-from-file
        with:
          path:

      - name: Result - Extracting from an empty path
        id: extract-empty-path-result
        if: always()
        run: |
          echo "Action error is: '${{ steps.extract-empty-path.outputs.error }}'"
          if [[ "${{ steps.extract-empty-path.outputs.error }}" != "Path is required" ]]; then
          echo "Action error is not 'Path is required'"
            exit 1
          else
            echo "Test successful"
          fi

      - name: Summary
        if: always()
        run: |
          bash ./.github/actions/gen-test-summary-md.sh \
            "Extracting a single word from a file" \
            ${{ steps.extract-data-single-word-result.outcome }} \
            "Extracting multiple words from a file" \
            ${{ steps.extract-data-multiple-words-result.outcome }} \
            "Extracting multiple lines from a file" \
            ${{ steps.extract-data-multiple-lines-result.outcome }} \
            "Extracting an empty file" \
            ${{ steps.extract-data-empty-result.outcome }} \
            "Extracting from a non-existent file" \
            ${{ steps.extract-non-existent-file-result.outcome }} \
            "Extracting from a directory" \
            ${{ steps.extract-directory-result.outcome }} \
            "Extracting from an empty path"
            ${{ steps.extract-empty-path-result.outcome }} \


########################################
########################################
########################################

# Test install-built-dependency action

# Need to check what happens if the path is empty
# Need to check what happens if the cache cannot be found
# Need to check what happens is the script cannot be found
# Need to check what happens if the script fails

########################################
########################################
########################################

# Test start-msys2=with-deps action

# Need to check what happens if the path is empty
# Need to check what happens if the path cannot be found
# Need to compare a clean install with one that has added dependencies
# Need to check what happens with multiple dependencies
# Need to check what happens with a group dependency

########################################
########################################
########################################
