# Workflow to compile Oolite and necessary dependencies
# It is designed to be run on a Windows runner and uses MSYS2-MINGW64 to compile Oolite.

# This workflow is can be triggered by a workflow_call event when called by other workflows.
# It can also be called by a workflow_dispatch event from GitHub.
# The event has three required inputs:
# - run_tests: A boolean to determine if the tests should be run on the built dependencies (if they exist).
# - from_fresh: A boolean to determine whether to force the dependencies to be built from scratch and not use a cached version.
# - oolite_ref: A string to specify the version of Oolite to build. This can be a branch or a tag. Commit hashes are not yet supported.

# The workflow is split into several jobs:
# - build-oolite: This job checks out the Oolite repository, checks out the specified ref, compiles Oolite, and caches the build.
# - build-oolite-installers: This job uses the caches from the successful build-oolite job and compiles the Oolite installers.
# - build-tools-make: This job checks out the tools-make repository, compiles tools-make, and caches the build.
# - build-libs-base: This job checks out the libs-base repository, compiles libs-base, and caches the build.
# - build-sdl: This job downloads and compiles SDL, and caches the build.
# - build-espeak: This job downloads and compiles eSpeak, and caches the build.
# - test-libs-base: This job uses the cache from the successful build-libs-base job and runs the tests on the built library.
# - test-sdl: This job uses the cache from the successful build-sdl job and runs the tests on the built library
# - clear-oolite-caches: This job deletes any caches created by the build-oolite job.
# - build-oolite-from-fresh-msys2-mingw64: This job is a single script to build Oolite from scratch. It is used to test the from-fresh script.
# - generate-pdfs: This job generates the PDFs of the Oolite documentation .odt files in the oolite/Doc/ folder.
# - check-oolite-ref: This job checks if the provided ref exists in the Oolite repository. Commit hashes are not yet supported.

name: Build Oolite on MSYS2-MINGW64
on: 
  workflow_call:
    inputs:
      run_tests:
        description: Run build tests
        required: true
        type: boolean
        default: false
      from_fresh:
        description: Build all dependencies from scratch
        required: true
        type: boolean
        default: false
      oolite_ref:
        description: The version of Oolite to build
        required: true
        type: string
        default: master
  workflow_dispatch:
    inputs:
      run_tests:
        description: Run build tests
        required: true
        type: boolean
        default: false
      from_fresh:
        description: Build all dependencies from scratch
        required: true
        type: boolean
        default: false
      oolite_ref:
        description: The version of Oolite to build
        required: true
        type: string
        default: master
permissions:
  contents: read
  actions: write
jobs:

########################################
########################################
########################################

# Build Oolite

  build-oolite:
    name: Build Oolite
    runs-on: windows-latest
    needs: [build-tools-make, build-libs-base, build-sdl, build-espeak]
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        build_type: [debug, release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Set up msys2
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: oolite-config/msys2-deps

      - name: Install built version of tools-make from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          install_script: ./deps/tools-make/install.sh

      - name: Install built version of libs-base from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: libs-base
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/libs-base/*', '**/deps/tools-make/*') }}
          install_script: ./deps/libs-base/install.sh

      - name: Install built version of SDL from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: SDL
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/sdl/*') }}
          install_script: ./deps/sdl/install.sh

      - name: Install built version of eSpeak from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: eSpeak
          path: espeak-1.43.03-source
          key: cache-espeak-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/espeak/*') }}
          install_script: ./deps/eSpeak/install.sh

      - name: Checkout Oolite
        uses: actions/checkout@v5
        with:
          repository: OoliteProject/oolite
          path: oolite
          submodules: recursive
          ref: ${{ inputs.oolite_ref }}

      - name: Configure and build Oolite
        run: |
          bash ./oolite-config/build.sh ${{ matrix.build_type }}

      - name: Cache Oolite build
        uses: actions/cache/save@v4
        with:
          path: oolite
          key: cache-oolite-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.build_type }}

########################################

# Build the installers.

  build-oolite-installers:
    name: Build Oolite installers
    runs-on: windows-latest
    needs: [build-tools-make, build-libs-base, build-sdl, build-espeak, build-oolite, generate-pdfs]
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        build_type: [release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Set up msys2
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: oolite-installer-config/msys2-deps

      - name: Install built version of tools-make from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          install_script: ./deps/tools-make/install.sh

      - name: Install built version of libs-base from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: libs-base
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/libs-base/*', '**/deps/tools-make/*') }}
          install_script: ./deps/libs-base/install.sh

      - name: Install built version of SDL from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: SDL
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/sdl/*') }}
          install_script: ./deps/sdl/install.sh

      - name: Install built version of eSpeak from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: eSpeak
          path: espeak-1.43.03-source
          key: cache-espeak-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/espeak/*') }}
          install_script: ./deps/eSpeak/install.sh

      - name: Retrieve Oolite cache
        id: restore-oolite
        uses: actions/cache/restore@v4
        with:
          path: oolite
          key: cache-oolite-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.build_type }}
          fail-on-cache-miss: true

      - name: Retrieve pdfs artifact
        uses: actions/download-artifact@v6
        with:
          name: pdfs
          path: oolite/Doc

      - name: Build installers
        run: |
          bash ./oolite-installer-config/build.sh ${{ matrix.build_type }}

      - name: Upload Oolite installers as artifacts
        uses: actions/upload-artifact@v5
        with:
          name: oolite-${{ matrix.build_type }}.exe
          path: |
            oolite/installers/win32/OoliteInstall*.exe

########################################
########################################
########################################

# Build the dependencies that need to be installed to build Oolite.

  build-tools-make:
    name: Build tools-make
    runs-on: windows-latest
    needs: [check-oolite-ref]
    defaults:
      run:
        shell: msys2 {0}
    env:
      TOOLS_MAKE_VERSION:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Load dependency data into env
        shell: bash
        run: |
          echo TOOLS_MAKE_VERSION=$(cat deps/tools-make/version) >> $GITHUB_ENV

      - name: Check cache status
        id: cache-status
        uses: ./.github/actions/early-exit-if-cache-exists
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          from_fresh: ${{ inputs.from_fresh }}

      - name: Set up msys2
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/tools-make/msys2-deps

      - name: Checkout tools-make
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: actions/checkout@v5
        with:
          repository: gnustep/tools-make
          path: tools-make
          ref: ${{ env.TOOLS_MAKE_VERSION }}

      - name: Configure and build tools-make
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          bash ./deps/tools-make/build.sh

      - name: Cache tools-make build
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/cache-built-dependency
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          delete_existing_cache: ${{ inputs.from_fresh == true && steps.cache-status.outputs.cache_hit == 'true' }}

########################################

  build-libs-base:
    name: Build libs-base
    runs-on: windows-latest
    needs: [build-tools-make]
    defaults:
      run:
        shell: msys2 {0}
    env:
      LIBS_BASE_VERSION:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Load dependency data into env
        shell: bash
        run: |
          echo LIBS_BASE_VERSION=$(cat deps/libs-base/version) >> $GITHUB_ENV

      - name: Check cache status
        id: cache-status
        uses: ./.github/actions/early-exit-if-cache-exists
        with:
          name: libs-base
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/libs-base/*', '**/deps/tools-make/*') }}
          from_fresh: ${{ inputs.from_fresh }}

      - name: Set up msys2
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/libs-base/msys2-deps

      - name: Install built version of tools-make from cache
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/install-built-dependency
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          install_script: ./deps/tools-make/install.sh

      - name: Checkout libs-base
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: actions/checkout@v5
        with:
          repository: gnustep/libs-base
          path: libs-base
          ref: ${{ env.LIBS_BASE_VERSION }}

      - name: Configure and build libs-base
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          bash ./deps/libs-base/build.sh

      - name: Cache libs-base build
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/cache-built-dependency
        with:
          name: libs-base
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/libs-base/*', '**/deps/tools-make/*') }}
          delete_existing_cache: ${{ inputs.from_fresh == true && steps.cache-status.outputs.cache_hit == 'true' }}

########################################

  build-sdl:
    name: Build SDL
    runs-on: windows-latest
    needs: [check-oolite-ref]
    defaults:
      run:
        shell: msys2 {0}
    env:
      SDL_VERSION:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Load dependency data into env
        shell: bash
        run: |
          echo SDL_VERSION=$(cat deps/sdl/version) >> $GITHUB_ENV

      - name: Check cache status
        id: cache-status
        uses: ./.github/actions/early-exit-if-cache-exists
        with:
          name: SDL
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/sdl/*') }}
          from_fresh: ${{ inputs.from_fresh }}

      - name: Set up msys2
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/sdl/msys2-deps

      - name: Download and extract SDL
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          wget ${{ env.SDL_VERSION }}
          tar -xf SDL-1.2.13.tar.gz

      - name: Configure and build SDL
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          bash ./deps/sdl/build.sh

      - name: Cache SDL build
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/cache-built-dependency
        with:
          name: SDL
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/sdl/*') }}
          delete_existing_cache: ${{ inputs.from_fresh == true && steps.cache-status.outputs.cache_hit == 'true' }}

########################################

  build-espeak:
    name: Build eSpeak
    runs-on: windows-latest
    needs: [check-oolite-ref]
    defaults:
      run:
        shell: msys2 {0}
    env:
      ESPEAK_VERSION:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Load dependency data into env
        shell: bash
        run: |
          echo ESPEAK_VERSION=$(cat deps/espeak/version) >> $GITHUB_ENV

      - name: Check cache status
        id: cache-status
        uses: ./.github/actions/early-exit-if-cache-exists
        with:
          name: eSpeak
          path: espeak-1.43.03-source
          key: cache-espeak-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/espeak/*') }}
          from_fresh: ${{ inputs.from_fresh }}

      - name: Set up msys2
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/espeak/msys2-deps

      - name: Download and extract eSpeak
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          wget ${{ env.ESPEAK_VERSION }}
          unzip espeak-1.43.03-source.zip

      - name: Configure and build eSpeak
        if: steps.cache-status.outputs.early_exit != 'skip'
        run: |
          bash ./deps/espeak/build.sh

      - name: Cache eSpeak build
        if: steps.cache-status.outputs.early_exit != 'skip'
        uses: ./.github/actions/cache-built-dependency
        with:
          name: eSpeak
          path: espeak-1.43.03-source
          key: cache-espeak-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/espeak/*') }}
          delete_existing_cache: ${{ inputs.from_fresh == true && steps.cache-status.outputs.cache_hit == 'true' }}

########################################
########################################
########################################

# Test the dependencies.
# These jobs only run if the build jobs have been successful and the run_tests input is true.

  test-libs-base:
    name: Test libs-base
    runs-on: windows-latest
    if: ${{ inputs.run_tests }}
    needs: [build-tools-make, build-libs-base]
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Set up msys2
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/libs-base/msys2-deps

      - name: Install built version of tools-make from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: tools-make
          path: tools-make
          key: cache-tools-make-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/tools-make/*') }}
          install_script: ./deps/tools-make/install.sh

      - name: Install built version of libs-base from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: libs-base
          path: libs-base
          key: cache-libs-base-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/libs-base/*', '**/deps/tools-make/*') }}
          install_script: ./deps/libs-base/install.sh

      - name: Test libs-base
        run: |
          . /mingw64/share/GNUstep/Makefiles/GNUstep.sh
          cd libs-base
          make -j $(nproc) check

      - name: Upload tests.log
        uses: actions/upload-artifact@v5
        with:
          name: libs-base_test.log
          path: |
            libs-base/Tests/tests.log

########################################

  test-sdl:
    name: Test SDL
    runs-on: windows-latest
    if: ${{ inputs.run_tests }}
    needs: [build-sdl]
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Set up msys2
        uses: ./.github/actions/start-msys2-with-deps
        with:
          deps_path: deps/sdl/msys2-deps

      - name: Install built version of SDL from cache
        uses: ./.github/actions/install-built-dependency
        with:
          name: SDL
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/build-oolite.yml', '**/deps/sdl/*') }}
          install_script: ./deps/sdl/install.sh

      - name: Build SDL tests
        run: |
          cd SDL-1.2.13/test
          ./configure
          make -j $(nproc)

########################################
########################################
########################################

# Clear unnecessary Oolite caches on GitHub

# The Oolite caches are only intended to be used in the current workflow run.
# We delete them after the workflow has completed to avoid unnecessary storage usage.

  clear-oolite-caches:
    name: Clear Oolite caches
    runs-on: windows-latest
    if: always()
    needs: [build-oolite, build-oolite-installers]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: List Oolite caches created by this workflow run
        run: |
          gh cache list | grep cache-oolite-${{ github.run_id }}-${{ github.run_attempt }} | awk '{print $2}' > cache-list.txt
          foreach ($cache in Get-Content cache-list.txt) {
            echo "Deleting cache $cache"
            gh cache delete $cache
          }

########################################
########################################
########################################

# Single script to build Oolite from scratch

  build-oolite-from-fresh-msys2-mingw64:
    name: Test the from-fresh script
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        build_type: [debug, release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true

      - name: Run build script with provided Oolite ref
        if: ${{ inputs.oolite_ref != 'master' }}
        run: |
          bash ./oolite-from-fresh-msys2-mingw64.sh -b ${{ matrix.build_type }} -r ${{ inputs.oolite_ref }}

      - name: Run build script with latest commit on Oolite master
        if: ${{ inputs.oolite_ref == 'master' }}
        run: |
          bash ./oolite-from-fresh-msys2-mingw64.sh -b ${{ matrix.build_type }}

########################################
########################################
########################################

# Generate the PDFs of the Oolite documentation .odt files in the oolite/Doc/ folder

# TODO
# This currently runs every time the workflow is run.
# Ideally we would cache the generated pdfs and only regenerate them if the .odt files have changed.
# As it runs on ubuntu-latest we would set enableCrossOsArchive to true in the cache action.
# The cache key should include the hash of oolite/Doc/ and the hash of this workflow file.
# Unfortunately I cannot get the hash of either the oolite/Doc/ folder or the .odt files to match on both Ubuntu and Windows runners.
# I suspect that the line endings are different on the two systems, but have failed to find a way to fix this.

  generate-pdfs:
    name: Generate PDFs
    runs-on: ubuntu-latest
    needs: [check-oolite-ref]

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v5

      - name: Checkout Oolite
        uses: actions/checkout@v5
        with:
          repository: OoliteProject/oolite
          path: oolite
          sparse-checkout: Doc
          ref: ${{ inputs.oolite_ref }}

      - name: Install LibreOffice and Fonts 
        run: |
          sudo apt update
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt -y install libreoffice ttf-mscorefonts-installer

      - name: Generate PDFs
        run: |
          find ./oolite/Doc -name "*.odt" -exec soffice --headless --convert-to pdf:"writer_pdf_Export" --outdir oolite/Doc {} \;

      - name: Store pdfs as artifacts
        uses: actions/upload-artifact@v5
        with:
          name: pdfs
          path: ./oolite/Doc/*.pdf

########################################
########################################
########################################

# Check if the provided ref exists in the Oolite repository

# TODO
# This uses git ls-remote to check if the provided ref exists in the Oolite repository.
# Branches and tags are supported.
# Commit hashes can not be detected by git ls-remote. We need to find an alternative way to check if a commit hash exists in the remote repository.
# While actions/checkout@v5 supports checking out from a commit hash, we cannot use them until we have a way to confirm that it is a valid commit.

  check-oolite-ref:
    name: Check Oolite ref is valid
    runs-on: ubuntu-latest

    steps:
      - name: Check if provided ref exists in Oolite repository (skip if ref is 'master' and use the latest commit from the master branch)
        if: ${{ inputs.oolite_ref != 'master' }}
        run: |
          if git ls-remote --exit-code https://github.com/OoliteProject/oolite.git ${{ inputs.oolite_ref }}
          then
              echo "The reference ${{ inputs.oolite_ref }} exists in the remote repository."
          else
              echo "The reference ${{ inputs.oolite_ref }} does not exist in the remote repository." >&2
              exit 1
          fi

########################################
########################################
########################################
